import { readFileSync, writeFileSync, existsSync } from 'node:fs'
import { fileURLToPath } from 'node:url'

interface UsernameMappingData {
  lastUpdated: number
  mapping: Record<string, string> // username -> steam_id
  totalUsers: number
}

interface UserGroupData {
  lastUpdated: number
  users: Record<string, any> // Currently username -> user data, will become steam_id -> user data
}

interface UserEntriesData {
  [key: string]: Array<{
    // Currently giveaway_id -> entries with usernames
    username: string
    joined_at: number
  }>
}

interface ExMembersData {
  lastUpdated: number
  users: Array<{
    username: string
    steam_id: string
    [key: string]: any
  }>
}

/**
 * Script to migrate all data files from username-based keys to steam_id-based keys.
 * This uses the mapping file generated by generate-username-mapping.ts
 */
export async function migrateToSteamId(): Promise<void> {
  const mappingPath = '../website/public/data/username_to_steamid_mapping.json'
  const groupUsersPath = '../website/public/data/group_users.json'
  const userEntriesPath = '../website/public/data/user_entries.json'
  const exMembersPath = '../website/public/data/ex_members.json'

  try {
    console.log('üîÑ Starting migration to steam_id-based keys...')

    // Check if mapping file exists
    if (!existsSync(mappingPath)) {
      console.error(`‚ùå Mapping file not found at ${mappingPath}`)
      console.error('Run generate-username-mapping.ts first')
      process.exit(1)
    }

    // Load the mapping
    const mappingData = readFileSync(mappingPath, 'utf-8')
    const { mapping }: UsernameMappingData = JSON.parse(mappingData)

    console.log(`üìã Loaded mapping for ${Object.keys(mapping).length} users`)

    // 1. Migrate group_users.json
    console.log('üîÑ Migrating group_users.json...')
    await migrateGroupUsers(groupUsersPath, mapping)

    // 2. Migrate user_entries.json
    console.log('üîÑ Migrating user_entries.json...')
    await migrateUserEntries(userEntriesPath, mapping)

    // 3. Migrate ex_members.json
    console.log('üîÑ Migrating ex_members.json...')
    await migrateExMembers(exMembersPath, mapping)

    console.log('‚úÖ Migration completed successfully!')
  } catch (error) {
    console.error('‚ùå Error during migration:', error)
    process.exit(1)
  }
}

async function migrateGroupUsers(
  filePath: string,
  mapping: Record<string, string>
): Promise<void> {
  const data = readFileSync(filePath, 'utf-8')
  const parsed: UserGroupData = JSON.parse(data)

  // Create new users object with steam_id as keys
  const newUsers: Record<string, any> = {}

  for (const [username, userData] of Object.entries(parsed.users)) {
    const steamId = mapping[username]
    if (steamId) {
      // Use steam_id as the key and add username field for compatibility
      newUsers[steamId] = {
        ...userData,
        // Keep username for backward compatibility during transition
        username: userData.username,
      }
    } else {
      console.warn(`‚ö†Ô∏è  No steam_id found for user ${username}, skipping`)
    }
  }

  // Update the data structure
  parsed.users = newUsers
  parsed.lastUpdated = Date.now()

  // Add migration metadata
  ;(parsed as any).migratedToSteamId = {
    migratedAt: Date.now(),
    originalKeyCount: Object.keys(parsed.users).length,
    migratedKeyCount: Object.keys(newUsers).length,
  }

  writeFileSync(filePath, JSON.stringify(parsed, null, 2))
  console.log(
    `‚úÖ Migrated ${Object.keys(newUsers).length} users in group_users.json`
  )
}

async function migrateUserEntries(
  filePath: string,
  mapping: Record<string, string>
): Promise<void> {
  const data = readFileSync(filePath, 'utf-8')
  const parsed: UserEntriesData = JSON.parse(data)

  // Create new entries structure - we'll keep the same structure for now
  // but the user_entries processing will need to be updated to work with steam_ids
  const newEntries: UserEntriesData = {}

  for (const [giveawayId, entries] of Object.entries(parsed)) {
    // Transform entries to use steam_id instead of username where possible
    const newEntriesForGiveaway = entries.map((entry) => {
      const steamId = mapping[entry.username]
      if (steamId) {
        return {
          steam_id: steamId,
          username: entry.username, // Keep for compatibility
          joined_at: entry.joined_at,
        }
      } else {
        console.warn(
          `‚ö†Ô∏è  No steam_id found for user ${entry.username} in giveaway ${giveawayId}`
        )
        return entry // Keep original if no mapping found
      }
    })

    newEntries[giveawayId] = newEntriesForGiveaway
  }

  // Add migration metadata
  ;(newEntries as any).migratedToSteamId = {
    migratedAt: Date.now(),
    totalGiveaways: Object.keys(newEntries).length,
    entriesWithSteamId: Object.values(newEntries)
      .flat()
      .filter((e) => 'steam_id' in e).length,
    entriesWithoutSteamId: Object.values(newEntries)
      .flat()
      .filter((e) => !('steam_id' in e)).length,
  }

  writeFileSync(filePath, JSON.stringify(newEntries, null, 2))
  console.log(
    `‚úÖ Migrated user entries for ${Object.keys(newEntries).length} giveaways`
  )
}

async function migrateExMembers(
  filePath: string,
  mapping: Record<string, string>
): Promise<void> {
  const data = readFileSync(filePath, 'utf-8')
  const parsed: ExMembersData = JSON.parse(data)

  // Transform ex-members array to use steam_id as primary identifier
  const newUsers = parsed.users.map((user) => {
    const steamId = mapping[user.username]
    if (steamId) {
      return {
        ...user,
        steam_id: steamId,
        // Keep username for compatibility
        username: user.username,
      }
    } else {
      console.warn(`‚ö†Ô∏è  No steam_id found for ex-member ${user.username}`)
      return user
    }
  })

  // Update the data structure
  parsed.users = newUsers
  parsed.lastUpdated = Date.now()

  // Add migration metadata
  ;(parsed as any).migratedToSteamId = {
    migratedAt: Date.now(),
    originalUserCount: parsed.users.length,
    migratedUserCount: newUsers.length,
  }

  writeFileSync(filePath, JSON.stringify(parsed, null, 2))
  console.log(`‚úÖ Migrated ${newUsers.length} ex-members`)
}

// Run the script if called directly
if (import.meta.url.startsWith('file:')) {
  const modulePath = fileURLToPath(import.meta.url)
  if (process.argv[1] === modulePath) {
    await migrateToSteamId()
  }
}
